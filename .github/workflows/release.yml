name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            suffix: linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            suffix: linux-arm64
          - os: ubuntu-latest
            goos: linux
            goarch: arm
            goarm: 7
            suffix: linux-armv7
          - os: ubuntu-latest
            goos: darwin
            goarch: amd64
            suffix: macos-amd64
          - os: ubuntu-latest
            goos: darwin
            goarch: arm64
            suffix: macos-arm64
          - os: ubuntu-latest
            goos: windows
            goarch: amd64
            suffix: windows-amd64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          # Create output directory
          mkdir -p dist
          
          # Set binary name based on OS
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="goload.exe"
          else
            BINARY_NAME="goload"
          fi
          
          # Build the binary
          go build -ldflags "-w -s" -o "dist/${BINARY_NAME}" ./cmd/loadtest
      
      - name: Package binary
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          PACKAGE_NAME="goload-${VERSION}-${{ matrix.suffix }}"
          
          # Create archive based on OS
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -j "${PACKAGE_NAME}.zip" dist/goload.exe
            echo "ARTIFACT_PATH=${PACKAGE_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czf "${PACKAGE_NAME}.tar.gz" -C dist goload
            echo "ARTIFACT_PATH=${PACKAGE_NAME}.tar.gz" >> $GITHUB_ENV
          fi
          
          # Generate checksum
          if [ "${{ matrix.goos }}" = "windows" ]; then
            sha256sum "${PACKAGE_NAME}.zip" > "${PACKAGE_NAME}.zip.sha256"
            echo "CHECKSUM_PATH=${PACKAGE_NAME}.zip.sha256" >> $GITHUB_ENV
          else
            sha256sum "${PACKAGE_NAME}.tar.gz" > "${PACKAGE_NAME}.tar.gz.sha256"
            echo "CHECKSUM_PATH=${PACKAGE_NAME}.tar.gz.sha256" >> $GITHUB_ENV
          fi
          
          # Save checksum to artifact
          mkdir -p checksums
          if [ "${{ matrix.goos }}" = "windows" ]; then
            cp "${PACKAGE_NAME}.zip.sha256" checksums/
          else
            cp "${PACKAGE_NAME}.tar.gz.sha256" checksums/
          fi
      
      - name: Upload checksums as artifact
        uses: actions/upload-artifact@v4
        with:
          name: checksums-${{ matrix.suffix }}
          path: checksums/
          retention-days: 1
      
      - name: Upload binary to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ARTIFACT_PATH }}
            ${{ env.CHECKSUM_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Create a combined checksums file as a separate job
  checksums:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all checksums
        uses: actions/download-artifact@v4
        with:
          path: all-checksums
      
      - name: Combine checksums
        run: |
          find ./all-checksums -type f -name "*.sha256" -exec cat {} \; > checksums.txt
          # Make sure the file is not empty
          [ -s checksums.txt ] || echo "No checksums found" > checksums.txt
      
      - name: Upload checksums to release
        uses: softprops/action-gh-release@v1
        with:
          files: checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}